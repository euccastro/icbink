Make a basic interpreter:
    Do Guarded continuations pretty early, because that's where I perceive the biggest risk and complication, and it may be traumatic to retrofit later on
        Test (building everything needed in the process)
        Guarded continuation-based exception handling.
            Hierarchy?  See what Klisp has.  Maybe check out R6RS?

Document non-rpython branch.

--- Postponed

breakpoints in debugger?

inherit source positions wherever it makes sense
    YAGNI?

Check out pypy/rpython/rlib/parsing/lexer.py:SourcePos when we want to use source position for debugging and exceptions.
Optimize dictionaries using maps:
    http://morepypy.blogspot.com.es/2011/03/controlling-tracing-of-interpreter-with_21.html
    Maybe we can use some of Pycket's environment optimizations.  Study them while keeping in mind that Kernel has first class environments.
Consider Kernel-compliant handling of cyclic lists.
Consider mutable lists.

--- Archived

start with immutable lists

don't worry about cyclic lists in the beginning
    and maybe don't ever, esp. if I stick to immutable lists

story of a combination:
    we interpret a pair
    on interpretation, we evaluate the car, with a CombineCont continuation
    the prev of the CombineCont is the continuation that is expecting the value
        but it doesn't have the right source info because it corresponds to 'upper' in the code
    we may be interested in returning to this place from a continuation where we are
        evaluating the arguments
        evaluating the body of the operative
    CombineCont calls combine on the first arg on plug_reduce *and its own prev expression as the prev*.
        THEREFORE, THE COMBINECONT ITSELF IS NOT REACHABLE ANYMORE!
        The combiner of a primitive operative is not very interesting; just calls primitive code
        The combiner of a compound operative builds the right environment and calls `sequence` (again, on the continuation previous to the combinecont)
        The combiner of an applicative calls evaluate_arguments with an ApplyCont child of the prev.
            def evaluate_arguments(vals, env, cont):
                if isinstance(vals, Pair):
                    return vals.car, env, EvalArgsCont(vals.cdr, env, cont)
                else:
                    return vals, env, cont
            EvalArgsCont, in turn, calls evaluate_arguments with a GatherArgsCont
