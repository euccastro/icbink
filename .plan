Debugging mode:
    Start by just tracing to every expression that has source_pos not None.
    See why we're not printing combinations
    Print results of traced expressions?
    Add file info to source_pos objects?  maybe as a shared member?

Make a basic interpreter:
    debugging mode
    report sources on errors
    inherit source positions wherever it makes sense
    symbols are matched on string in environments.  only symbols without
    source positions get cached
        so maybe caching is not such big a win
    source tracking!
        how?
        cheapest option might be that a KernelValue has a source_pos
            but then what do we do with true, false, nil, inert...?
        another option would be to have wrappers on objects:
            xxx(source_pos, kernel_value)
        mais precisamos modificar todo o código para aceder estes kernel_value fields?
        ainda outra opçom é termos distintos trues, falses, nils, inerts...
        é realmente um custo a maiores, se estamos tendo source_pos objects
        lying around anyway?
            um objecto só é o mesmo se vém do mesmo lugar na fonte
    Do Guarded continuations pretty early, because that's where I perceive the biggest risk and complication, and it may be traumatic to retrofit later on
        Build everything needed to test this.
            Test interception.
                do guard-dynamic-extent.
                    Maybe I can test something before that!
                        (extend-continuation (guard-continuation ...))
        Guarded continuation-based exception handling.

--- Postponed

Check out pypy/rpython/rlib/parsing/lexer.py:SourcePos when we want to use source position for debugging and exceptions.
Optimize dictionaries using maps:
    http://morepypy.blogspot.com.es/2011/03/controlling-tracing-of-interpreter-with_21.html
    Maybe we can use some of Pycket's environment optimizations.  Study them while keeping in mind that Kernel has first class environments.
Consider Kernel-compliant handling of cyclic lists.
Consider mutable lists.

--- Archived

start with immutable lists
don't worry about cyclic lists in the beginning
    and maybe don't ever, esp. if I stick to immutable lists
